// android/settings.gradle

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }
    includeBuild("../node_modules/@react-native/gradle-plugin")
}

// 将 react.settings 插件的 plugins {} 块提前
plugins {
    id("com.facebook.react.settings")
}

// 然后是 dependencyResolutionManagement
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
}

// React Native 扩展配置，这个可以跟在 plugins {} 块后面
extensions.configure(com.facebook.react.ReactSettingsExtension){ ex ->
  def command = [
    'node',
    '--no-warnings',
    '--eval',
    'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
    'react-native-config',
    '--json',
    '--platform',
    'android'
  ].toList()
  ex.autolinkLibrariesFromCommand(command)
}

rootProject.name = 'MusicFree'
include ':app'

// Expo 相关的 autolinking
def expoPackageJsonFile = new File(new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim()).getParentFile(), "../scripts/autolinking.gradle")
if (expoPackageJsonFile.exists()) {
    apply from: expoPackageJsonFile
} else {
    println "警告: 未找到 Expo autolinking.gradle 文件 at " + expoPackageJsonFile.getAbsolutePath()
}
useExpoModules()
