apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile
import groovy.json.JsonSlurper


react {
    autolinkLibrariesWithApp()

    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc:+'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

static def getVersion() {
    def inputFile = new File("../package.json")
    def packageJson = new JsonSlurper().parseText(inputFile.text)
    return packageJson["version"]
}

def appVersion = getVersion()
def appVersionCode = 400011


android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "fun.upup.musicfree"

    defaultConfig {
        applicationId "fun.upup.musicfree"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionCode
        versionName appVersion
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(keystoreProperties['RELEASE_STORE_FILE'])
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
            keyAlias keystoreProperties['RELEASE_KEY_ALIAS']
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
        }
    }
    splits {
            abi {
                reset()
                enable true
                universalApk true
                include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // !! Add lines
    implementation project(':react-native-fs')
    implementation 'com.facebook.fresco:animated-gif:2.5.0'
    implementation 'net.jthink:jaudiotagger:2.2.5'
    // ExoPlayer core and ALAC extension for Apple Lossless support
    def exoplayer_version = "2.19.1" // 建议使用一个变量管理版本号
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-hls:$exoplayer_version" // 如果需要 HLS
    implementation "com.google.android.exoplayer:exoplayer-dash:$exoplayer_version" // 如果需要 DASH
    // ALAC 扩展，用于播放 .m4a 文件中的 Apple Lossless 编码
    implementation "com.google.android.exoplayer:extension-alac:$exoplayer_version"
    // FFmpeg 扩展可以提供更广泛的格式支持，包括一些 m4a 变体，但会增加 APK 大小
    implementation "com.google.android.exoplayer:extension-ffmpeg:$exoplayer_version"
}
