name: 自动构建安卓应用

on:
  workflow_dispatch: # 允许手动触发
  pull_request:
    types:
      - closed # 当 Pull Request 关闭时触发

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 如果您希望提交到特定的分支，可以在这里指定
          # ref: ${{ github.head_ref || github.ref_name }} # 尝试获取PR分支或当前触发分支
          # 为了确保提交到主分支（或其他您定义的主开发分支），您可能需要更复杂的逻辑或固定分支名
          # 如果是PR合并触发的，通常是提交到合并的目标分支
          token: ${{ secrets.GITHUB_TOKEN }} # 确保有权限推送

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 设置 Java (JDK) 环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 清理 Gradle 缓存 (如果需要)
        run: |
          rm -rf ~/.gradle/caches
          rm -rf ~/.gradle/wrapper

      - name: 配置 Gradle 缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # 或者 node_modules，取决于你的偏好和 npm 版本
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 安装 Node.js 依赖并生成 package-lock.json
        run: npm ci # 使用 npm install 来生成或更新 package-lock.json

      # - name: 提交 package-lock.json (如果发生变化)
        # run: |
          # git config --global user.name 'github-actions[bot]'
          # git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # git add package-lock.json
          # 检查是否有暂存的更改
          # if git diff --staged --quiet; then
            # echo "package-lock.json 未发生变化，无需提交。"
          # else
            # git commit -m "chore: 更新 package-lock.json [skip ci]"
            # git push
            # echo "package-lock.json 已提交。"
          # fi
        # [skip ci] 通常用于告知一些CI系统跳过本次提交触发的构建，但具体效果取决于您的CI配置

      - name: 获取应用版本号
        id: get_version
        run: echo "APP_VERSION=$(node -p -e 'require("./package.json").version')" >> $GITHUB_ENV

      - name: 动态生成签名密钥库和 keystore.properties
        run: |
          echo "动态生成签名密钥..."
          keytool -genkey -v \
            -keystore release.jks \
            -storepass "${{ secrets.RELEASE_STORE_PASSWORD }}" \
            -alias "${{ secrets.RELEASE_KEY_ALIAS }}" \
            -keypass "${{ secrets.RELEASE_KEY_PASSWORD }}" \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=MusicFree Workflow, OU=Dev, O=GitHub Actions, L=CI, ST=CI, C=US"

          echo "创建 keystore.properties..."
          echo "RELEASE_STORE_FILE=../../release.jks" > android/keystore.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> android/keystore.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> android/keystore.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> android/keystore.properties
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

      - name: 赋予 Gradle Wrapper 执行权限
        run: chmod +x ./android/gradlew

      - name: 检查 RNGP 路径和内容
        run: |
          echo "RNGP Path: $(pwd)/node_modules/@react-native/gradle-plugin"
          ls -la node_modules/@react-native/gradle-plugin
          cat node_modules/@react-native/gradle-plugin/package.json || echo "RNGP package.json not found"

      - name: 构建 Release APK
        working-directory: ./android
        run: |
          ./gradlew assembleRelease --no-daemon --stacktrace

      - name: 查找构建的 APK 文件
        id: find_apk
        run: |
          APK_PATH=$(find ./android/app/build/outputs/apk/release -name '*.apk' | head -n 1)
          echo "APK_PATH=${APK_PATH}" >> $GITHUB_ENV
          if [ -z "${APK_PATH}" ]; then
            echo "错误：未找到构建的 APK 文件。"
            exit 1
          fi

      - name: 上传构建产物 (APK)
        uses: actions/upload-artifact@v4
        with:
          name: MusicFree-v${{ env.APP_VERSION }}-${{ github.sha }}
          path: ${{ env.APK_PATH }}
          if-no-files-found: error
